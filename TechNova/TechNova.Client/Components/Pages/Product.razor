@page "/product/{productId:int}"
@rendermode InteractiveAuto

@attribute [StreamRendering]

@if (DisplayProduct is null)
{
    <div class="card mb-3 h-100" aria-hidden="true">
        <div class="row g-0">
            <div class="col-md-4">
                <img src="./img/Products/placeholder.jpg" class="card-img-top" alt="...">
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <h5 class="card-title placeholder-glow">
                        <span class="placeholder col-6"></span>
                    </h5>
                    <p class="card-text placeholder-glow">
                        <span class="placeholder col-7"></span>
                        <span class="placeholder col-4"></span>
                        <span class="placeholder col-4"></span>
                        <span class="placeholder col-6"></span>
                        <span class="placeholder col-8"></span>
                    </p>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card mb-3 h-100">
        <div class="row g-0">
            <div class="col-md-4">
                <img src="@DisplayProduct.ImgUri" class="img-fluid rounded-start" alt="@DisplayProduct.Title">
            </div>
            <div class="col-md-8">
                <div class="d-flex flex-column ">
                    <div class="d-flex ms-5 mt-5">
                        <h3 class="card-title">@DisplayProduct.Title</h3>
                    </div>
                    <div class="d-flex">
                        <div class="w-50 p-5 ">
                            <h5>Description</h5>
                            <p class="text-body-secondary pt-1">@DisplayProduct.LongDescription</p>
                        </div>
                        <div class="w-50 pt-5">
                            <h5>Information</h5>
                            <div class="pt-1">
                                @if (DisplayProduct.OnSale)
                                {
                                    <p class="text-body-secondary" style="text-decoration: line-through;">Old Price: <span>@DisplayProduct.Price</span>@DisplayProduct.Currency.CurrencySymbols</p>
                                    <p class="text-body-secondary"><span>@DisplayProduct.Discount</span>% OFF</p>
                                    <p class="text-body-secondary">Discounted Price: <span style="font-weight:600; color: red">@DisplayProduct.DiscountPrice@DisplayProduct.Currency.CurrencySymbols</span></p>
                                    
                                }
                                else
                                {
                                    <p class="text-body-secondary">Price: <span>@DisplayProduct.Price</span>@DisplayProduct.Currency.CurrencySymbols</p>
                                }
                                <p class="text-body-secondary">
                                    Quantity:
                                    <span class="badge rounded-pill text-bg-@quantityColour">
                                        @(@DisplayProduct.Quantity == 0 ? "Out of stock" : @DisplayProduct.Quantity)
                                    </span>
                                </p>
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-primary" @onclick="AddToCart">add to cart</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public int productId { get; set; }

    public ProductResponseDTO? DisplayProduct { get; set; }

    string quantityColour => QuantityStatus(DisplayProduct.Quantity);

    string QuantityStatus(int quantity)
    {
        return quantity switch
        {
            var status when status > 5 => "success",
            var status when status <= 5 && status >= 1 => "warning",
            var status when status == 0 => "danger",
            _ => "default"
        };
    }

    async Task AddToCart()
    {
        await OrderService.AddToUserCartAsync(DisplayProduct!, userId!);
    }

    private AuthenticationState? authenticationState;
    string? userId;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        userId = authenticationState
            .User
            .Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .First()
            .Value;

        if (DisplayProduct is null)
        {
            var respons = await ProductService.GetSingelProductByIdAsync(productId);
            DisplayProduct = respons;

            if (respons is null)
            {
                DisplayProduct = new ProductResponseDTO();
            }
        }

        CurrencyService.OnCurrencyChanged += UpdateCurrency;

    }

    void UpdateCurrency()
    {
        DisplayProduct.Currency = CurrencyService.CurrentCurrency;

        StateHasChanged();
    }

    public void Dispose()
    {
        CurrencyService.OnCurrencyChanged -= UpdateCurrency;
    }

}
